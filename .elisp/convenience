
(define-prefix-command 'ccw-key-map)
(global-set-key (kbd "C-c k") 'ccw-key-map)

(defun insert-pointer ()
  "Inserts a '->' into the buffer for my poor little pinky."
  (interactive)
  (insert "->"))
(define-key ccw-key-map "a" 'insert-pointer)

(defun insert-equals-pointer ()
  "Inserts a '=>' into the buffer for my poor little pinky."
  (interactive)
  (insert "=>"))
(define-key ccw-key-map "e" 'insert-equals-pointer)

(defun insert-parens ()
  "Inserts a matching pair of parentheses and puts the cursor between them."
  (interactive)
  (insert "()")
  (backward-char))
(define-key ccw-key-map "p" 'insert-parens)

(defun insert-braces ()
  "Inserts a matching pair of braces and puts the cursor between them."
  (interactive)
  (insert "{}")
  (backward-char))
(define-key ccw-key-map "f" 'insert-braces)

(defun insert-brackets ()
  "Inserts a matching pair of brackets and puts the cursor between them."
  (interactive)
  (insert "[]")
  (backward-char))
(define-key ccw-key-map "b" 'insert-brackets)

(defun insert-angle-brackets ()
  "Inserts a matching pair of angle-brackets and puts the cursor between them."
  (interactive)
  (insert "<>")
  (backward-char))
(define-key ccw-key-map "k" 'insert-angle-brackets)

(defun insert-quotes ()
  "Inserts a matching pair of `\"' and puts the cursor between them."
  (interactive)
  (insert "\"\"")
  (backward-char))
(define-key ccw-key-map "d" 'insert-quotes)

(defun insert-single-quotes ()
  "Inserts a matching pair of `'' and puts the cursor between them."
  (interactive)
  (insert "''")
  (backward-char))
(define-key ccw-key-map "s" 'insert-single-quotes)

(defun insert-string-function ()
  "Inserts a (\"\") for functions that take string arguments."
  (interactive)
  (insert-parens)
  (insert-quotes))
(define-key ccw-key-map "l" 'insert-string-function)

(defun begin-function-braces ()
  "Inserts a brace pair with indenting to begin a function."
  (interactive)
  (insert-braces)
  (newline)
  (indent-for-tab-command)
  (previous-line)
  (move-end-of-line nil)
  (newline)
  (indent-for-tab-command))
(define-key ccw-key-map "j" 'begin-function-braces)

(defun swap-windows ()
  "Swaps the other window's buffer with the current window's."
  (interactive)
  (save-excursion
    (let ((curbuf (current-buffer)))
      (other-window 1)
      (let ((otherbuf (current-buffer)))
	(switch-to-buffer curbuf)
	(other-window 1)
	(switch-to-buffer otherbuf)
	(other-window 1)))))

;; Make rgrep searches appear in the same window. This is basically
;; copied from the default but from-compilation-buffer is always
;; false to get the desired effect.
(defun compilation-goto-locus (msg mk end-mk)
  "Jump to an error corresponding to MSG at MK.
All arguments are markers.  If END-MK is non-nil, mark is set there
and overlay is highlighted between MK and END-MK."
  ;; Custom version: displays matches in same window as compilation buffer.
  (let* ((from-compilation-buffer ())
         ;; Use an existing window if it is in a visible frame.
         (pre-existing (get-buffer-window (marker-buffer msg) 0))
         (w (if (and from-compilation-buffer pre-existing)
                ;; Calling display-buffer here may end up (partly) hiding
                ;; the error location if the two buffers are in two
                ;; different frames.  So don't do it if it's not necessary.
                pre-existing
	      (display-buffer (marker-buffer msg) '(nil (allow-no-window . t)))))
	 (highlight-regexp (with-current-buffer (marker-buffer msg)
			     ;; also do this while we change buffer
			     (goto-char (marker-position msg))
			     (and w (progn (compilation-set-window w msg)
                                           (compilation-set-overlay-arrow w)))
			     compilation-highlight-regexp)))
    ;; Ideally, the window-size should be passed to `display-buffer'
    ;; so it's only used when creating a new window.
    (when (and (not pre-existing) w)
      (compilation-set-window-height w))

    (if from-compilation-buffer
        ;; If the compilation buffer window was selected,
        ;; keep the compilation buffer in this window;
        ;; display the source in another window.
        (let ((pop-up-windows t))
          (pop-to-buffer (marker-buffer mk) 'other-window))
      (switch-to-buffer (marker-buffer mk)))
    (unless (eq (goto-char mk) (point))
      ;; If narrowing gets in the way of going to the right place, widen.
      (widen)
      (if next-error-move-function
	  (funcall next-error-move-function msg mk)
	(goto-char mk)))
    (if end-mk
        (push-mark end-mk t)
      (if mark-active (setq mark-active nil)))
    ;; If hideshow got in the way of
    ;; seeing the right place, open permanently.
    (dolist (ov (overlays-at (point)))
      (when (eq 'hs (overlay-get ov 'invisible))
        (delete-overlay ov)
        (goto-char mk)))

    (when highlight-regexp
      (if (timerp next-error-highlight-timer)
	  (cancel-timer next-error-highlight-timer))
      (unless compilation-highlight-overlay
	(setq compilation-highlight-overlay
	      (make-overlay (point-min) (point-min)))
	(overlay-put compilation-highlight-overlay 'face 'next-error))
      (with-current-buffer (marker-buffer mk)
	(save-excursion
	  (if end-mk (goto-char end-mk) (end-of-line))
	  (let ((end (point)))
	    (if mk (goto-char mk) (beginning-of-line))
	    (if (and (stringp highlight-regexp)
		     (re-search-forward highlight-regexp end t))
		(progn
		  (goto-char (match-beginning 0))
		  (move-overlay compilation-highlight-overlay
				(match-beginning 0) (match-end 0)
				(current-buffer)))
	      (move-overlay compilation-highlight-overlay
			    (point) end (current-buffer)))
	    (if (or (eq next-error-highlight t)
		    (numberp next-error-highlight))
		;; We want highlighting: delete overlay on next input.
		(add-hook 'pre-command-hook
			  #'compilation-goto-locus-delete-o)
	      ;; We don't want highlighting: delete overlay now.
	      (delete-overlay compilation-highlight-overlay))
	    ;; We want highlighting for a limited time:
	    ;; set up a timer to delete it.
	    (when (numberp next-error-highlight)
	      (setq next-error-highlight-timer
		    (run-at-time next-error-highlight nil
				 'compilation-goto-locus-delete-o)))))))
    (when (and (eq next-error-highlight 'fringe-arrow))
      ;; We want a fringe arrow (instead of highlighting).
      (setq next-error-overlay-arrow-position
	    (copy-marker (line-beginning-position))))))
